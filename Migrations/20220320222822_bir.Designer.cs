// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Covid19.Migrations
{
    [DbContext(typeof(CovidContext))]
    [Migration("20220320222822_bir")]
    partial class bir
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.1.22076.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("Visibility")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "adem@gmail.com",
                            Password = "pass",
                            RoleId = 0,
                            Visibility = true
                        },
                        new
                        {
                            Id = 2,
                            Email = "ali@gmail.com",
                            Password = "pass",
                            RoleId = 0,
                            Visibility = true
                        });
                });

            modelBuilder.Entity("Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OpenAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("HealthStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Chronic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Covid")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HealthStatus");
                });

            modelBuilder.Entity("HesCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("HesCodeEndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("HesCodeStartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HessCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Risk")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HesCode");
                });

            modelBuilder.Entity("Quarantine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Quarantine");
                });

            modelBuilder.Entity("RiskCalculation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("BodyPain")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Chronic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Cough")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Fatigue")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Fire")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<bool>("RunnyNose")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SmellAndTaste")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RiskCalculation");
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birtdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Gender")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("HealthStatusId")
                        .HasColumnType("int");

                    b.Property<int>("HesCodeId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OpenAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("QuarantineId")
                        .HasColumnType("int");

                    b.Property<int>("RiskCalculationId")
                        .HasColumnType("int");

                    b.Property<string>("TCNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("VaccinationCardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AddressId");

                    b.HasIndex("HealthStatusId");

                    b.HasIndex("HesCodeId");

                    b.HasIndex("QuarantineId");

                    b.HasIndex("RiskCalculationId");

                    b.HasIndex("VaccinationCardId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("VaccinationCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsVaccination")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NumberOfDoses")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("VaccinationOne")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("VaccinationThree")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("VaccinationTwo")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("VaccinationCard");
                });

            modelBuilder.Entity("Account", b =>
                {
                    b.HasOne("Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Address", b =>
                {
                    b.HasOne("City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("District", "District")
                        .WithMany("Addresses")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("District");
                });

            modelBuilder.Entity("District", b =>
                {
                    b.HasOne("City", "City")
                        .WithMany("District")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.HasOne("Account", "Accounts")
                        .WithMany("Users")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthStatus", "HealthStatuses")
                        .WithMany("Users")
                        .HasForeignKey("HealthStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HesCode", "HesCode")
                        .WithMany("Users")
                        .HasForeignKey("HesCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quarantine", "Quarantine")
                        .WithMany("Users")
                        .HasForeignKey("QuarantineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiskCalculation", "RiskCalculation")
                        .WithMany("Users")
                        .HasForeignKey("RiskCalculationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VaccinationCard", "VaccinationCard")
                        .WithMany("Users")
                        .HasForeignKey("VaccinationCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accounts");

                    b.Navigation("Address");

                    b.Navigation("HealthStatuses");

                    b.Navigation("HesCode");

                    b.Navigation("Quarantine");

                    b.Navigation("RiskCalculation");

                    b.Navigation("VaccinationCard");
                });

            modelBuilder.Entity("Account", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Address", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("City", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("District");
                });

            modelBuilder.Entity("District", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("HealthStatus", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("HesCode", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Quarantine", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("RiskCalculation", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("VaccinationCard", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
